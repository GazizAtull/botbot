const TelegramBot = require('node-telegram-bot-api');
const path = require('path');
const { connectToDb, getDb } = require('./db'); // –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É –º–æ–¥—É–ª—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

const BOT_TOKEN = process.env.BOT_TOKEN;
const WEBHOOK_URL = `https://walrus-app-h2zfl.ondigitalocean.app/bot${BOT_TOKEN}`; 

const bot = new TelegramBot(BOT_TOKEN);

// –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
const photoPath = path.join(__dirname, 'logo.png');

// –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
const message = `
<b>Welcome to</b> <b><u>USDTStaking App</u></b>
<b>Stack-To-Earn</b>

Welcome, <a href="https://t.me/usdtstaking_news">USDTStaking App</a>! ü§ù

üöÄ <b>Discover the revolutionary Stack-To-Earn app built on Telegram!</b>

Experience limitless opportunities for Stake USDT. Our infrastructure, powered by TRON blockchain, ensures optimized transactions and reduced transfer fees.

Be among the pioneers in earning with USDTStaking App!

Complete missions, invite friends, rent additional mining power to earn even more.

Don't miss the opportunity to increase your income and strive for financial independence with us! üí∞üöÄ

<b>Tap Start App üëá</b>
`;

// –ö–Ω–æ–ø–∫–∏ (–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
const options = {
    parse_mode: 'HTML',
    reply_markup: {
        inline_keyboard: [
            [
                { text: '‚ö° Start App ‚ö°', web_app: { url: 'https://66afb02aa7f4c7c3d41e2066--luxury-narwhal-b92ac9.netlify.app/' } },
            ],
            [
                { text: 'üéÅ Join Community! üéÅ', url: 'https://t.me/usdtstaking_group/1' }
            ]
        ]
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
const handleMessage = async (msg) => {
    const chatId = msg.chat.id;
    const db = getDb();
    const usersCollection = db.collection('usersDATA');

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const user = {
        chatId: chatId,
        firstName: msg.from.first_name,
        lastName: msg.from.last_name,
        username: msg.from.username,
    };
    await usersCollection.updateOne({ chatId: chatId }, { $set: user }, { upsert: true });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
    bot.sendPhoto(chatId, photoPath, { caption: message, ...options });
};

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
connectToDb(async (err) => {
    if (err) {
        console.error('Failed to connect to the database', err);
        process.exit(1);
    } else {
        console.log('Connected to the database');
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
        try {
            await bot.setWebHook(WEBHOOK_URL);
            console.log('Webhook has been set');
        } catch (error) {
            console.error('Failed to set webhook:', error);
            process.exit(1);
        }
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
const processUpdate = (update) => {
    if (update.message) {
        handleMessage(update.message);
    }
};

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
module.exports = { processUpdate };
